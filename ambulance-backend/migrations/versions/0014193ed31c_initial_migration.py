"""Initial migration

Revision ID: 0014193ed31c
Revises: 
Create Date: 2025-08-28 16:03:13.948029

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0014193ed31c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drivers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('phone_number', sa.String(length=32), nullable=False),
    sa.Column('vehicle_number', sa.String(length=32), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('current_location', sa.String(length=255), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('vehicle_number')
    )
    op.create_table('bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('ambulance_id', sa.Integer(), nullable=True),
    sa.Column('pickup_location', sa.Text(), nullable=False),
    sa.Column('destination', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('requested_at', sa.DateTime(), nullable=False),
    sa.Column('accepted_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ambulance_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('ambulance_drivers')
    op.drop_table('organizations')
    with op.batch_alter_table('hospitals', schema=None) as batch_op:
        batch_op.add_column(sa.Column('contact_number', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('email', sa.String(length=255), nullable=True))
        batch_op.alter_column('address',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('hospitals_name_key'), type_='unique')
        batch_op.drop_column('city')
        batch_op.drop_column('pincode')
        batch_op.drop_column('state')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('phone_number', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('address', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('emergency_contacts', sa.Text(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.drop_constraint(batch_op.f('users_email_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('users_phone_key'), type_='unique')
        batch_op.create_unique_constraint(None, ['phone_number'])
        batch_op.drop_column('phone')
        batch_op.drop_column('role')
        batch_op.drop_column('password_hash')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('role', sa.VARCHAR(length=32), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('phone', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_unique_constraint(batch_op.f('users_phone_key'), ['phone'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('users_email_key'), ['email'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        batch_op.drop_column('emergency_contacts')
        batch_op.drop_column('address')
        batch_op.drop_column('phone_number')

    with op.batch_alter_table('hospitals', schema=None) as batch_op:
        batch_op.add_column(sa.Column('state', sa.VARCHAR(length=120), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('pincode', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('city', sa.VARCHAR(length=120), autoincrement=False, nullable=True))
        batch_op.create_unique_constraint(batch_op.f('hospitals_name_key'), ['name'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('address',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
        batch_op.drop_column('email')
        batch_op.drop_column('contact_number')

    op.create_table('organizations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organizations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    sa.UniqueConstraint('name', name='organizations_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('ambulance_drivers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('license_number', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('vehicle_number', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('hospital_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint('hospital_id IS NOT NULL AND organization_id IS NULL OR hospital_id IS NULL AND organization_id IS NOT NULL', name=op.f('ck_driver_one_affiliation_only')),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.id'], name=op.f('ambulance_drivers_hospital_id_fkey')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('ambulance_drivers_organization_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('ambulance_drivers_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ambulance_drivers_pkey')),
    sa.UniqueConstraint('license_number', name=op.f('ambulance_drivers_license_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('user_id', name=op.f('ambulance_drivers_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('vehicle_number', name=op.f('ambulance_drivers_vehicle_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('bookings')
    op.drop_table('drivers')
    # ### end Alembic commands ###
